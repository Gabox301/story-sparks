generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("BBDD_DATABASE_URL")
}

model User {
  id                       String    @id @default(uuid())
  email                    String    @unique
  name                     String?
  password                 String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  passwordResetExpires     DateTime?
  passwordResetToken       String?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  emailVerifiedAt          DateTime?
  isEmailVerified          Boolean   @default(false)
  stories                  Story[]
  accessTokens             AccessToken[]
  refreshTokens            RefreshToken[]
  revokedTokens            RevokedToken[]
}

model Story {
  id                  String   @id @default(uuid())
  theme               String
  mainCharacterName   String
  mainCharacterTraits String
  title               String
  content             String
  favorite            Boolean  @default(false)
  extendedCount       Int      @default(0)
  imageUrl            String?
  audioUrl            String?
  textFileUrl         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([favorite])
}

model RevokedToken {
  id         String   @id @default(uuid())
  token      String   @unique @db.Text
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
  ip         String?
  userAgent  String?

  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model AccessToken {
  id         String   @id @default(uuid())
  token      String   @unique @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  revokedAt  DateTime?
  ip         String?
  userAgent  String?

  @@index([userId])
  @@index([expiresAt])
}

model RefreshToken {
  id         String   @id @default(uuid())
  token      String   @unique @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  revokedAt  DateTime?
  replacedBy String?
  ip         String?
  userAgent  String?

  @@index([userId])
  @@index([expiresAt])
}
